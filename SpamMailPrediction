# -*- coding: utf-8 -*-
"""
Created on Sat May 18 01:04:16 2019

@author: acer
"""


from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
import pandas as pd
import sklearn.preprocessing
import sklearn.utils
import sklearn.metrics
import sklearn.model_selection
import seaborn as sns
import matplotlib.pyplot as plt

#1 Read data
data = pd.read_csv('spambase.data', header=None)
data.rename(columns={57:'is_spam'}, inplace=True)

#2 Split testing and training data
spam = data[data['is_spam'] == 1]
ham = data[data['is_spam'] == 0]
spam_train, spam_test = train_test_split(spam, train_size=0.3)
ham_train, ham_test = train_test_split(ham, train_size=0.3)

#3 Append data
X_train = ham_train.append(spam_train)
y_train = X_train.pop('is_spam')
X_test = ham_test.append(spam_test)
y_test = X_test.pop('is_spam')

#============================================================================================

#4.1 Classify by NaiveBayes
spam_bayes = MultinomialNB()
spam_bayes.fit(X_train, y_train)
print("The accuracy of the training NB is {:.2f}".format(spam_bayes.score(X_train, y_train)))
print("The accuracy of the testing NB is {:.2f}".format(spam_bayes.score(X_test, y_test)))

#============================================================================================

#4.2 Classify by KNN
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
print("The accuracy of the training KNN is {:.2f}".format(knn.score(X_train, y_train)))
print("The accuracy of the testing KNN is {:.2f}".format(knn.score(X_test, y_test)))

#============================================================================================

#4.3 Classify by RF
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=20, random_state=0)  
rf.fit(X_train, y_train)  
y_pred = rf.predict(X_test)  
print("The accuracy of the training RF is {:.2f}".format(rf.score(X_train, y_train)))
print("The accuracy of the testing RF is {:.2f}".format(rf.score(X_test, y_test)))

#============================================================================================

#4.4.1 Making SVM process faster
from sklearn.preprocessing import MinMaxScaler
scaling = MinMaxScaler(feature_range=(-2,2)).fit(X_train)
X_train_std = scaling.transform(X_train)
X_test_std = scaling.transform(X_test)

#4.4.2 Classify by SVM
from sklearn.svm import SVC
svm = SVC(kernel="linear")
svm.fit(X_train_std, y_train)
print("The accuracy of the training SVM is {:.2f}".format(svm.score(X_train_std, y_train)))
print("The accuracy of the testing SVM is {:.2f}".format(svm.score(X_test_std, y_test)))

#============================================================================================

#4.5.1 Classify by NN
from sklearn.neural_network import MLPClassifier
nn = MLPClassifier(solver='lbfgs', hidden_layer_sizes=(6, 3), random_state=1)
nn.fit(X_train, y_train)
print("The accuracy of the training NN is {:.2f}".format(nn.score(X_train, y_train)))
print("The accuracy of the testing NN is {:.2f}".format(nn.score(X_test, y_test)))

'''#4.5.2 Classify by NN with LSTM
from keras.layers import LSTM
from keras.models import Sequential
from keras.layers import Flatten, Dense, Embedding
max_features = 20000
maxlen = 20

model = Sequential()
model.add(Embedding(max_features, 64))
model.add(LSTM(64))
model.add(Dense(64, activation='relu', input_shape=(20000,)))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])
history = model.fit(X_train, y_train, epochs=300, batch_size=512, validation_split=0.2)
nn1 = model.evaluate(X_train,y_train)
nn2 = model.evaluate(X_test,y_test)
print('The accuracy of the training NN is {:0.2f}'.format(nn1[1]))
print('The accuracy of the testing NN is {:0.2f}'.format(nn2[1]))'''

#============================================================================================

#5.1 Initialize list of lists 
accuracies = [['NB', spam_bayes.score(X_test, y_test)], ['KNN', knn.score(X_test, y_test)], 
               ['RF',rf.score(X_test, y_test)], ['SVM', svm.score(X_test_std, y_test)], ['NN', nn.score(X_test, y_test)]]
 
#5.2 Create the pandas DataFrame 
df = pd.DataFrame(accuracies, columns = ['Algorithm', 'Accuracy']) 

#5.3 Plot test accuracy summarry 
sns.set()
plt.plot(df['Algorithm'], df['Accuracy'])
plt.axis([-1, 5, 0.7, 1.0])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Algorithm') 
plt.show()
  
sns.countplot(x='is_spam', data=data)
plt.legend(['ham','spam'], ncol=2, loc='upper right')
